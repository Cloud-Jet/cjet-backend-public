name: CD

# CloudJet Continuous Deployment Pipeline

on:
  repository_dispatch:
    types: [deploy-services]
  
  # ÌÖåÏä§Ìä∏Ïö© ÏàòÎèô Ïã§Ìñâ
  workflow_dispatch:
    inputs:
      built_services:
        description: 'Services to deploy (comma-separated)'
        required: true
        default: 'auth-service'
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/v3g6g4v7

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Parse deployment information from dispatch
      id: deployment
      run: |
        echo "Event name: ${{ github.event_name }}"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # ÏàòÎèô Ïã§Ìñâ Ïãú
          echo "Manual workflow dispatch detected"
          BUILT_SERVICES="${{ github.event.inputs.built_services }}"
          VERSION="${{ github.event.inputs.version }}"
          COMMIT_SHA="${{ github.sha }}"
        else
          # Repository dispatch Ïãú
          echo "Repository dispatch event received"
          echo "Event payload: ${{ toJSON(github.event.client_payload) }}"
          BUILT_SERVICES="${{ github.event.client_payload.built_services }}"
          VERSION="${{ github.event.client_payload.version }}"
          COMMIT_SHA="${{ github.event.client_payload.commit_sha }}"
        fi
        
        if [ -z "$BUILT_SERVICES" ]; then
          echo "‚ùå No services to deploy"
          exit 1
        fi
        
        echo "built_services=$BUILT_SERVICES" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        
        echo "Built services: $BUILT_SERVICES"
        echo "Version: $VERSION"
        echo "Commit: $COMMIT_SHA"

    - name: Verify ECR images exist for built services
      run: |
        VERSION="${{ steps.deployment.outputs.version }}"
        BUILT_SERVICES="${{ steps.deployment.outputs.built_services }}"
        
        if [ -z "$BUILT_SERVICES" ]; then
          echo "No services to verify, skipping ECR check"
          exit 0
        fi
        
        echo "Verifying images with tag: $VERSION"
        echo "Built services: $BUILT_SERVICES"
        
        # ÏÑúÎπÑÏä§Î™Ö ‚Üí ECR Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î™Ö Îß§Ìïë
        declare -A SERVICE_TO_REPO
        SERVICE_TO_REPO["admin-service"]="cj-admin-svc"
        SERVICE_TO_REPO["auth-service"]="cj-auth-svc"
        SERVICE_TO_REPO["booking-service"]="cj-booking-svc"
        SERVICE_TO_REPO["flight-service"]="cj-flight-svc"
        SERVICE_TO_REPO["payment-service"]="cj-payment-svc"
        
        # ÎπåÎìúÎêú ÏÑúÎπÑÏä§Îì§Îßå Í≤ÄÏ¶ù
        IFS=',' read -ra SERVICES <<< "$BUILT_SERVICES"
        for service in "${SERVICES[@]}"; do
          repo_name="${SERVICE_TO_REPO[$service]}"
          if [ -n "$repo_name" ]; then
            echo "Checking $repo_name:$VERSION for service $service"
            aws ecr-public describe-images \
              --repository-name "$repo_name" \
              --image-ids imageTag="$VERSION" \
              --region us-east-1 || {
              echo "‚ùå Image $repo_name:$VERSION not found in ECR"
              exit 1
            }
            echo "‚úÖ $repo_name:$VERSION found in ECR"
          else
            echo "‚ö†Ô∏è Unknown service: $service"
          fi
        done

    - name: Clone cjet-k8s repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/cjet-k8s  # Í∞ôÏùÄ ownerÏùò cjet-k8s Î†àÌè¨
        token: ${{ secrets.K8S_REPO_TOKEN }}  # cjet-k8s Î†àÌè¨Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏûàÎäî ÌÜ†ÌÅ∞
        path: cjet-k8s
        ref: main

    - name: Update Helm values.yaml for changed services only
      run: |
        VERSION="${{ steps.deployment.outputs.version }}"
        BUILT_SERVICES="${{ steps.deployment.outputs.built_services }}"
        
        cd cjet-k8s/helm
        
        if [ -z "$BUILT_SERVICES" ]; then
          echo "No services to update, skipping values.yaml update"
          exit 0
        fi
        
        echo "Updating values.yaml with version: $VERSION"
        echo "Only updating services: $BUILT_SERVICES"
        
        # ÏÑúÎπÑÏä§Î™Ö ‚Üí values.yaml ÌÇ§ Îß§Ìïë
        declare -A SERVICE_TO_KEY
        SERVICE_TO_KEY["admin-service"]="admin"
        SERVICE_TO_KEY["auth-service"]="auth"
        SERVICE_TO_KEY["booking-service"]="booking"
        SERVICE_TO_KEY["flight-service"]="flight"
        SERVICE_TO_KEY["payment-service"]="payment"
        
        # Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§Îì§Îßå ÏóÖÎç∞Ïù¥Ìä∏
        IFS=',' read -ra SERVICES <<< "$BUILT_SERVICES"
        for service in "${SERVICES[@]}"; do
          service_key="${SERVICE_TO_KEY[$service]}"
          if [ -n "$service_key" ]; then
            echo "Updating $service_key service tag to $VERSION"
            
            # Ìï¥Îãπ ÏÑúÎπÑÏä§Ïùò tagÎßå ÏóÖÎç∞Ïù¥Ìä∏ (sed ÏÇ¨Ïö©)
            sed -i "/^  $service_key:/,/^  [a-zA-Z]/ { 
              /tag:/ {
                s/tag: .*/tag: $VERSION/
              }
            }" values.yaml
            
            echo "‚úÖ Updated $service ($service_key) to version $VERSION"
          else
            echo "‚ö†Ô∏è Unknown service mapping: $service"
          fi
        done
        
        echo ""
        echo "Updated values.yaml (showing tag lines only):"
        grep -A1 -B1 "tag:" values.yaml

    - name: Commit and push to cjet-k8s
      run: |
        VERSION="${{ steps.deployment.outputs.version }}"
        BUILT_SERVICES="${{ steps.deployment.outputs.built_services }}"
        
        cd cjet-k8s
        
        # Git ÏÑ§Ï†ï
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action CD"
        
        # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§ Î™©Î°ùÏùÑ Î≥¥Í∏∞ Ï¢ãÍ≤å Ìè¨Îß∑
        SERVICES_LIST=$(echo "$BUILT_SERVICES" | tr ',' '\n' | sed 's/^/- /' | tr '\n' ' ')
        
        # Ïª§Î∞ã Î∞è Ìë∏Ïãú
        git add helm/values.yaml
        git commit -m "üöÄ Update image tags to $VERSION

        Updated services:
        $SERVICES_LIST

        Updated by CD pipeline from cjet-backend  
        Commit: ${{ steps.deployment.outputs.commit_sha }}
        
        ü§ñ Generated with [GitHub Actions](https://github.com/${{ github.repository }}/actions)"
        
        git push origin main
        
        echo "‚úÖ Successfully updated cjet-k8s with version $VERSION"
        echo "‚úÖ Updated services: $BUILT_SERVICES"

    - name: Deployment summary
      run: |
        VERSION="${{ steps.deployment.outputs.version }}"
        BUILT_SERVICES="${{ steps.deployment.outputs.built_services }}"
        
        echo "üéâ CD Pipeline completed successfully!"
        echo "üì¶ Updated cjet-k8s/helm/values.yaml with version: $VERSION"
        echo "üîß Updated services: $BUILT_SERVICES"
        echo "üéØ Next step: Team member should run 'helm upgrade' command locally"
        echo ""
        echo "Helm upgrade command:"
        echo "helm upgrade cloudjet ./cjet-k8s/helm --namespace user"
        echo ""
        echo "Only the following services will be redeployed:"
        IFS=',' read -ra SERVICES <<< "$BUILT_SERVICES"
        for service in "${SERVICES[@]}"; do
          echo "  - $service ‚Üí $VERSION"
        done