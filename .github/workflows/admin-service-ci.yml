name: Admin Service CI

on:
  push:
    branches: [ main, backend/ch ]
    paths: 
      - 'admin-service/**'
      - 'shared/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'admin-service/**'
      - 'shared/**'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/v3g6g4v7
  SERVICE_NAME: admin-service
  ECR_REPOSITORY: cj-admin-svc
  SERVICE_PATH: admin-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install Admin Service dependencies
      run: |
        cd admin-service
        pip install -r requirements.txt
        echo "‚úÖ Admin Service dependencies installed"
    
    - name: Test Admin Service
      run: |
        cd admin-service
        echo "üß™ Running Admin Service tests..."
        python -m py_compile app.py
        python -m py_compile routes.py
        python -m py_compile models.py
        echo "‚úÖ Admin Service syntax check passed"

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/backend/ch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Extract version
      id: version
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        if echo "$COMMIT_MSG" | grep -q "v[0-9]\+\.[0-9]\+\.[0-9]\+"; then
          VERSION=$(echo "$COMMIT_MSG" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
        else
          LATEST_TAG=$(git tag --sort=-version:refname | grep '^v[0-9]' | head -1)
          if [ -z "$LATEST_TAG" ]; then
            VERSION="v1.0.0"
          else
            MAJOR_MINOR=$(echo "$LATEST_TAG" | cut -d. -f1,2)
            PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            VERSION="${MAJOR_MINOR}.${NEW_PATCH}"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Version: $VERSION"

    - name: Check for changes
      id: changes
      run: |
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        if echo "$CHANGED_FILES" | grep -q "^admin-service/\|^shared/"; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Admin Service has changes"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "‚è≠Ô∏è Admin Service no changes"
        fi

    - name: Build and push Docker image
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        REPO="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"
        
        # Build from root directory with admin-service context
        docker build -f admin-service/Dockerfile -t $REPO:$VERSION -t $REPO:latest .
        docker push $REPO:$VERSION
        docker push $REPO:latest
        echo "‚úÖ Image pushed: $REPO:$VERSION"

    - name: Trigger CD
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDispatchEvent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            event_type: 'deploy-admin-service',
            client_payload: {
              service: 'admin-service',
              version: '${{ steps.version.outputs.version }}',
              commit_sha: '${{ github.sha }}'
            }
          });
          console.log('‚úÖ CD triggered');